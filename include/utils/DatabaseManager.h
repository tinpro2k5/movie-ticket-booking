#ifndef DATABASEMANAGER_H
#define DATABASEMANAGER_H

#include <mysql/mysql.h>
#include <string>
#include <iostream>
#include <memory>
#include <fstream>
#include <vector>

/*
Khi return, compiler s·∫Ω t·ª± optimize b·∫±ng k·ªπ thu·∫≠t g·ªçi l√† Return Value Optimization (RVO):
Kh√¥ng th·ª±c s·ª± copy memory.
‚û°Ô∏è  an to√†n.


üõ°Ô∏è L∆∞u √Ω th√™m 
Kh√¥ng return con tr·ªè th√¥ (ScriptResult*) n·∫øu kh√¥ng c·∫ßn thi·∫øt.
Kh√¥ng return reference (ScriptResult&) t·ª´ local variable ‚Üí s·∫Ω crash (v∆∞·ª£t scope).
Lu√¥n return b·∫±ng gi√° tr·ªã (ScriptResult), ƒë·ªÉ C++ t·ª± lo move optimization.

*/

struct QueryResult {
    bool success;
    std::unique_ptr<MYSQL_RES, void(*)(MYSQL_RES*)> result; // N·∫øu SELECT
    my_ulonglong affected_rows;                             // N·∫øu INSERT/UPDATE/DELETE
    std::string error_message;                              // N·∫øu l·ªói

    QueryResult() 
        : success(false), result(nullptr, mysql_free_result), affected_rows(0) {}
};

struct ScriptResult {
    bool success;  // C·∫£ script th√†nh c√¥ng hay kh√¥ng
    std::vector<QueryResult> queries; // K·∫øt qu·∫£ t·ª´ng c√¢u l·ªánh
    std::string error_message; // L·ªói t·ªïng n·∫øu c√≥

    ScriptResult() : success(true) {}
};


class ServerInfo{
    private:
    std::string host;
    std::string user;
    std::string password;
    unsigned int port;
public:
    inline static std::string DEFAULT_LOCAL = "localhost";
    inline static std::string DEFAULT_USER = "root";
    inline static std::string DEFAULT_PASS = "rootpassword";
    inline static unsigned int DEFAULT_PORT = 3306;
    ServerInfo();
    ServerInfo(const std::string& host, const std::string& user, const std::string& password, unsigned int port);
    
    
    
    void setHost(const std::string& host);
    void setUser(const std::string& user);
    void setPassword(const std::string& password);
    void setPort(unsigned int port);
    
    
    std::string getHost() const;
    std::string getUser() const;
    std::string getPassword() const;
    unsigned int getPort() const;

};

class DatabaseManager {
private:

    static std::unique_ptr<DatabaseManager> instance; 
    MYSQL *conn; // K·∫øt n·ªëi MySQL

    // Private constructor: ch·ªâ ƒë∆∞·ª£c kh·ªüi t·∫°o t·ª´ b√™n trong class
    DatabaseManager(){conn = nullptr;}   
public:
    void setupDatabase();
    void connect(const ServerInfo& server_info);
    void disconnect();
    ~DatabaseManager();

    // Kh√¥ng cho copy
    DatabaseManager(const DatabaseManager&) = delete;
    DatabaseManager& operator=(const DatabaseManager&) = delete;

    // Truy c·∫≠p th·ªÉ hi·ªán duy nh·∫•t
    static DatabaseManager* getInstance();

    // L·∫•y k·∫øt n·ªëi MySQL
    MYSQL* getConnection();


    bool isConnected() const {
        return conn != nullptr;
    }

    QueryResult executeQuery(const std::string& query);
    ScriptResult executeScript(const std::string& script_path);
};


#endif // DATABASEMANAGER_H
